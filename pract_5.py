# -*- coding: utf-8 -*-
"""pract_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TZr4OpYaiVR97Cx4LEz3LixUkXOynDpo
"""

#rail fence transpoisition cipher
#pt=plain text
#ct=cipher text
#dt=decrypted text
def encryptRF(pt, key):
    # create the matrix to cipher
    rail = [['\n' for i in range(len(pt))]for j in range(key)]
    # to find the direction
    dir_down = False
    row, col = 0, 0
    for i in range(len(pt)):
        # check the direction of flow
        if (row == 0) or (row == key - 1):
            dir_down = not dir_down
        # fill the corresponding alphabet
        rail[row][col] = pt[i]
        col += 1
        # find the next row using
        # direction flag
        if dir_down:
            row += 1
        else:
            row -= 1
    # now we can construct the cipher
    # using the rail matrix
    result = []
    for i in range(key):
        for j in range(len(pt)):
            if rail[i][j] != '\n':
                result.append(rail[i][j])
    return("" . join(result))

def decryptRF(cipher, key):
    # create the matrix to cipher
    rail = [['\n' for i in range(len(cipher))]for j in range(key)]
    # to find the direction
    dir_down = None
    row, col = 0, 0
    # mark the places with '*'
    for i in range(len(cipher)):
        if row == 0:
            dir_down = True
        if row == key - 1:
            dir_down = False
        # place the marker
        rail[row][col] = '-'
        col += 1
        # find the next row
        # using direction flag
        if dir_down:
            row += 1
        else:
            row -= 1
    # now we can construct the
    # fill the rail matrix
    index = 0
    for i in range(key):
        for j in range(len(cipher)):
            if ((rail[i][j] == '-') and
            (index < len(cipher))):
                rail[i][j] = cipher[index]
                index += 1
    # zig-zag manner to construct resultant text
    result = []
    row, col = 0, 0
    for i in range(len(cipher)):
        # check the direction of flow
        if row == 0:
            dir_down = True
        if row == key-1:
            dir_down = False
        # place the marker
        if (rail[row][col] != '-'):
            result.append(rail[row][col])
            col += 1
        # find the next row using
        # direction flag
        if dir_down:
            row += 1
        else:
            row -= 1
    return("".join(result))

# Driver Code
ch=0
while(ch!=3):
  print("1.encryption\n2.decryption\n3.exit")
  ch=int(input("enter your choice from above:"))
  #encryption
  if ch==1:
    msg=input("enter file name for plain text:")
    try:
      with open(msg, 'r') as file:
        pt = file.read()
        print("File content:",pt)
    except FileNotFoundError:
      print("File not found.")
    print("plain text:",pt)
    key=int(input("enter key:"))
    print("key:",key)
    cipher = encryptRF(pt,key)

    #printing encrypted text
    ct=input("enter the file name for cipher text:")
    try:
      with open(ct, 'w') as file:
        content = cipher
        file.write(content)
      print(f"File '{ct}' created and plain text is encrypted successfully.")
    except Exception as e:
      print("An error occurred:", e)
  #decryption
  if ch==2:
    dct=input("enter file name of which decryption is to be done:")
    try:
      with open(dct, 'r') as file:
        cipher_txt = file.read()
        print("File content:",cipher_txt)
    except FileNotFoundError:
      print("File not found.")
    decrypt=decryptRF(cipher_txt,key)
    dt=input("enter the file name for decrypted text:")
    try:
      with open(dt, 'w') as file:
        content1 = decrypt
        file.write(content1)
      print(f"File '{dt}' created and plain text is decrypted successfully.")
    except Exception as e:
      print("An error occurred:", e)
  if ch==3:
    print("exit!!")
    exit(0)